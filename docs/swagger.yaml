basePath: /api/v1
definitions:
  model.LoginUserRequest:
    properties:
      password:
        maxLength: 100
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - password
    - username
    type: object
  model.RegisterUserRequest:
    properties:
      name:
        maxLength: 100
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - name
    - password
    - username
    type: object
  model.TokenResponse:
    properties:
      access_token:
        type: string
      token_type:
        type: string
    type: object
  model.UpdateUserRequest:
    properties:
      name:
        maxLength: 100
        type: string
      password:
        maxLength: 100
        type: string
      username:
        maxLength: 100
        type: string
    type: object
  model.UserResponse:
    properties:
      created_at:
        type: integer
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: integer
      username:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Fiber Boilerplate API
  version: "1.0"
paths:
  /users:
    post:
      consumes:
      - application/json
      description: Registers a new user with the given details.
      parameters:
      - description: User Registration Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.UserResponse'
      summary: Register a new user
      tags:
      - Users
  /users/current:
    get:
      description: Retrieves the currently logged-in user's information.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
      security:
      - BearerAuth: []
      summary: Get Current User
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates the currently logged-in user's profile.
      parameters:
      - description: User Update Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
      security:
      - BearerAuth: []
      summary: Update Current User
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a JWT token.
      parameters:
      - description: User Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TokenResponse'
      summary: User Login
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
